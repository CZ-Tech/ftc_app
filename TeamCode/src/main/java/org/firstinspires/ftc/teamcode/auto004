package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import java.util.ArrayList;
import java.util.List;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.matrices.OpenGLMatrix;
import org.firstinspires.ftc.robotcore.external.matrices.VectorF;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackableDefaultListener;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import static org.firstinspires.ftc.robotcore.external.navigation.AngleUnit.DEGREES;
import static org.firstinspires.ftc.robotcore.external.navigation.AxesOrder.XYZ;
import static org.firstinspires.ftc.robotcore.external.navigation.AxesOrder.YZX;
import static org.firstinspires.ftc.robotcore.external.navigation.AxesReference.EXTRINSIC;
import static org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection.BACK;
import static org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection.FRONT;

@Autonomous(name = "auto001", group = "Concept")
public class congtouzailai extends LinearOpMode
{
    private static final VuforiaLocalizer.CameraDirection CAMERA_CHOICE = FRONT;
    private static final boolean PHONE_IS_PORTRAIT = false  ;
    private static final float mmPerInch        = 25.4f;
    private static final float mmTargetHeight   = (6) * mmPerInch;
    private DcMotor zuoqian;
    private DcMotor zuohou;
    private DcMotor youqian;
    private DcMotor youhou;
    private Servo guding;
    private Servo tisheng;
    private Servo shangzhua;
    private Servo xiazhua;
    private ElapsedTime runtime = new ElapsedTime();
    double angle = 0;
    private VuforiaLocalizer vuforia = null;
    enum MotorMode{
        qian,hou,zuo,you,ting,zuoxuan,youxuan
    }
    enum jiaodu{
        fangxia,zhuaqu
    }
    private static final String TFOD_MODEL_ASSET = "Skystone.tflite";
    private static final String LABEL_FIRST_ELEMENT = "Stone";
    private static final String LABEL_SECOND_ELEMENT = "Skystone";
    private static final String VUFORIA_KEY =
            "“;
    private TFObjectDetector tfod;
    private static final float stoneZ = 2.00f * mmPerInch;
    private static final float bridgeZ = 6.42f * mmPerInch;
    private static final float bridgeY = 23 * mmPerInch;
    private static final float bridgeX = 5.18f * mmPerInch;
    private static final float bridgeRotY = 59;
    private static final float bridgeRotZ = 180;
    private static final float halfField = 72 * mmPerInch;
    private static final float quadField  = 36 * mmPerInch;
    private OpenGLMatrix lastLocation = null;
    private boolean targetVisible = false;
    double tX,tY,tZ,rX,rY,rZ;
    private float phoneXRotate    = 0;
    private float phoneYRotate    = 0;
    private float phoneZRotate    = 0;
    @Override
public void runOpMode()
    {
        //region 初始化
        //region 配对电机
        zuoqian = hardwareMap.get(DcMotor.class, "motor_zuoqian");
        youqian = hardwareMap.get(DcMotor.class, "motor_youqian");
        zuohou = hardwareMap.get(DcMotor.class, "motor_zuohou");
        youhou = hardwareMap.get(DcMotor.class, "motor_youhou");
        xiazhua = hardwareMap.get(Servo.class, "xiazhua");
        shangzhua = hardwareMap.get(Servo.class, "shangzhua");
        guding = hardwareMap.get(Servo.class,"guding");
        tisheng = hardwareMap.get(Servo.class,"tisheng");
        //endregion
        //region 改变电机自转方向
        zuoqian.setDirection(DcMotor.Direction.FORWARD);
        zuohou.setDirection(DcMotor.Direction.FORWARD);
        youqian.setDirection(DcMotor.Direction.FORWARD);
        youhou.setDirection(DcMotor.Direction.FORWARD);
        shejiao(jiaodu.fangxia);
        tisheng.setPosition(0);
        //endregion
        //region vuforia图像识别初始化
        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters(cameraMonitorViewId);
        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraDirection   = CAMERA_CHOICE;
        vuforia = ClassFactory.getInstance().createVuforia(parameters);
        VuforiaTrackables targetsSkyStone = this.vuforia.loadTrackablesFromAsset("Skystone");
        VuforiaTrackable stoneTarget = targetsSkyStone.get(0);
        stoneTarget.setName("Stone Target");
        VuforiaTrackable blueRearBridge = targetsSkyStone.get(1);
        blueRearBridge.setName("Blue Rear Bridge");
        VuforiaTrackable redRearBridge = targetsSkyStone.get(2);
        redRearBridge.setName("Red Rear Bridge");
        VuforiaTrackable redFrontBridge = targetsSkyStone.get(3);
        redFrontBridge.setName("Red Front Bridge");
        VuforiaTrackable blueFrontBridge = targetsSkyStone.get(4);
        blueFrontBridge.setName("Blue Front Bridge");
        VuforiaTrackable red1 = targetsSkyStone.get(5);
        red1.setName("Red Perimeter 1");
        VuforiaTrackable red2 = targetsSkyStone.get(6);
        red2.setName("Red Perimeter 2");
        VuforiaTrackable front1 = targetsSkyStone.get(7);
        front1.setName("Front Perimeter 1");
        VuforiaTrackable front2 = targetsSkyStone.get(8);
        front2.setName("Front Perimeter 2");
        VuforiaTrackable blue1 = targetsSkyStone.get(9);
        blue1.setName("Blue Perimeter 1");
        VuforiaTrackable blue2 = targetsSkyStone.get(10);
        blue2.setName("Blue Perimeter 2");
        VuforiaTrackable rear1 = targetsSkyStone.get(11);
        rear1.setName("Rear Perimeter 1");
        VuforiaTrackable rear2 = targetsSkyStone.get(12);
        rear2.setName("Rear Perimeter 2");
        List<VuforiaTrackable> allTrackables = new ArrayList<VuforiaTrackable>();
        allTrackables.addAll(targetsSkyStone);
        stoneTarget.setLocation(OpenGLMatrix
                .translation(0, 0, stoneZ)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 90, 0, -90)));
        blueFrontBridge.setLocation(OpenGLMatrix
                .translation(-bridgeX, bridgeY, bridgeZ)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 0, bridgeRotY, bridgeRotZ)));
        blueRearBridge.setLocation(OpenGLMatrix
                .translation(-bridgeX, bridgeY, bridgeZ)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 0, -bridgeRotY, bridgeRotZ)));
        redFrontBridge.setLocation(OpenGLMatrix
                .translation(-bridgeX, -bridgeY, bridgeZ)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 0, -bridgeRotY, 0)));
        redRearBridge.setLocation(OpenGLMatrix
                .translation(bridgeX, -bridgeY, bridgeZ)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 0, bridgeRotY, 0)));
        red1.setLocation(OpenGLMatrix
                .translation(quadField, -halfField, mmTargetHeight)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 90, 0, 180)));
        red2.setLocation(OpenGLMatrix
                .translation(-quadField, -halfField, mmTargetHeight)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 90, 0, 180)));
        front1.setLocation(OpenGLMatrix
                .translation(-halfField, -quadField, mmTargetHeight)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 90, 0 , 90)));
        front2.setLocation(OpenGLMatrix
                .translation(-halfField, quadField, mmTargetHeight)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 90, 0, 90)));
        blue1.setLocation(OpenGLMatrix
                .translation(-quadField, halfField, mmTargetHeight)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 90, 0, 0)));
        blue2.setLocation(OpenGLMatrix
                .translation(quadField, halfField, mmTargetHeight)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 90, 0, 0)));
        rear1.setLocation(OpenGLMatrix
                .translation(halfField, quadField, mmTargetHeight)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 90, 0 , -90)));
        rear2.setLocation(OpenGLMatrix
                .translation(halfField, -quadField, mmTargetHeight)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, XYZ, DEGREES, 90, 0, -90)));
        initVuforia();
        if (CAMERA_CHOICE == BACK) {
            phoneYRotate = -90;
        } else {
            phoneYRotate = 90;
        }
        if (PHONE_IS_PORTRAIT) {
            phoneXRotate = 90 ;
        }
        final float CAMERA_FORWARD_DISPLACEMENT  = 4.0f * mmPerInch;
        final float CAMERA_VERTICAL_DISPLACEMENT = 8.0f * mmPerInch;
        final float CAMERA_LEFT_DISPLACEMENT     = 0;
        OpenGLMatrix robotFromCamera = OpenGLMatrix
                .translation(CAMERA_FORWARD_DISPLACEMENT, CAMERA_LEFT_DISPLACEMENT, CAMERA_VERTICAL_DISPLACEMENT)
                .multiplied(Orientation.getRotationMatrix(EXTRINSIC, YZX, DEGREES, phoneYRotate, phoneZRotate, phoneXRotate));
        for (VuforiaTrackable trackable : allTrackables) {
            ((VuforiaTrackableDefaultListener) trackable.getListener()).setPhoneInformation(robotFromCamera, parameters.cameraDirection);
        }
        targetsSkyStone.activate();
        //endregion
        //region vuforia图像识别
        while (!isStopRequested()) {
            targetVisible = false;
            for (VuforiaTrackable trackable : allTrackables) {
                if (((VuforiaTrackableDefaultListener)trackable.getListener()).isVisible()) {
                    telemetry.addData("Visible Target", trackable.getName());
                    targetVisible = true;
                    OpenGLMatrix robotLocationTransform = ((VuforiaTrackableDefaultListener)trackable.getListener()).getUpdatedRobotLocation();
                    if (robotLocationTransform != null) {
                        lastLocation = robotLocationTransform;
                    }
                    break;
                }
            }

            if (targetVisible) {
                VectorF translation = lastLocation.getTranslation();
                telemetry.addData("Pos (in)", "{X, Y, Z} = %.1f, %.1f, %.1f",
                        translation.get(0) / mmPerInch, translation.get(1) / mmPerInch, translation.get(2) / mmPerInch);
                Orientation rotation = Orientation.getOrientation(lastLocation, EXTRINSIC, XYZ, DEGREES);
                telemetry.addData("Rot (deg)", "{Roll, Pitch, Heading} = %.0f, %.0f, %.0f", rotation.firstAngle, rotation.secondAngle, rotation.thirdAngle);
                 tX = translation.get(0);
                 tY = translation.get(1);
                 tZ = translation.get(2);
                 rX = rotation.firstAngle;
                 rY = rotation.secondAngle;
                 rZ = rotation.thirdAngle;


            }
            else {
                telemetry.addData("Visible Target", "none");
            }
            telemetry.update();
        }
        targetsSkyStone.deactivate();
    //endregion
        //region tfod图像识别初始化
        if (ClassFactory.getInstance().canCreateTFObjectDetector()) {
        initTfod();
    } else {
        telemetry.addData("Sorry!", "This device is not compatible with TFOD");
    }
    if (tfod != null) {
        tfod.activate();
    }
    telemetry.addData(">", "Press Play to start op mode");
    telemetry.update();
        //endregion
         waitForStart();//等待开始
         runtime.reset();
    //region tfod图像识别
         if (opModeIsActive())
    {
        while (opModeIsActive())
        {
            shejiao(jiaodu.fangxia);
            if (tfod != null)
            {
                List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();
                if (updatedRecognitions != null)
                {
                    telemetry.addData("# Object Detected", updatedRecognitions.size());
                    int i = 0;
                    for (Recognition recognition : updatedRecognitions) {
                        runMotor(MotorMode.zuoxuan);
                        telemetry.addData(String.format("label (%d)", i), recognition.getLabel());
                        telemetry.addData(String.format("  left,top (%d)", i), "%.03f , %.03f",
                                recognition.getLeft(), recognition.getTop());
                        telemetry.addData(String.format("  right,bottom (%d)", i), "%.03f , %.03f",
                                recognition.getRight(), recognition.getBottom());
                        if (recognition.getLabel().equals(LABEL_SECOND_ELEMENT)) {
                            runMotor(MotorMode.ting);
                            angle = recognition.estimateAngleToObject(AngleUnit.DEGREES);
                        } else if (recognition.getLabel().equals(LABEL_FIRST_ELEMENT)) {
                            runMotor(MotorMode.ting);
                            angle = recognition.estimateAngleToObject(AngleUnit.DEGREES);
                        }


                        while (angle <= -4 || angle >= 4) {
                            if (angle <= -4)
                                runMotor(MotorMode.youxuan);
                            else
                                runMotor(MotorMode.zuoxuan);
                        }
                        runMotor(MotorMode.qian);
                        sleep(1000);
                        runMotor(MotorMode.ting);

                        //TODO:修改1.1
                        if (tX <= 1.1) {
                            tisheng.setPosition(0);
                            shejiao(jiaodu.zhuaqu);
                            tisheng.setPosition(1);
                        }
                        runMotor(MotorMode.hou);
                        sleep(2000);
                        runMotor(MotorMode.youxuan);
                        sleep(1000);
                        runMotor(MotorMode.qian);
                        tisheng.setPosition(0);
                        shejiao(jiaodu.fangxia);
                        tisheng.setPosition(1);
                        guding.setPosition(1);
                        runMotor(MotorMode.qian);
                        sleep(1000);
                        guding.setPosition(0);
                        runMotor(MotorMode.hou);
                        sleep(1000);
                        runMotor(MotorMode.ting);
                        telemetry.update();
                    }
                }
            }
        }
    }
    if (tfod != null) {
        tfod.shutdown();
    }
    //endregion
}
    private void initVuforia() {
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();
        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraDirection = CameraDirection.BACK;
        vuforia = ClassFactory.getInstance().createVuforia(parameters);
    }
    private void initTfod() {
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
                "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfodParameters.minimumConfidence = 0.8;
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);
        tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABEL_FIRST_ELEMENT, LABEL_SECOND_ELEMENT);
    }
    //region移动
    public void runMotor(MotorMode mode) {
        switch (mode) {
            case qian:
                zuoqian.setPower(1);
                zuohou.setPower(1);
                youqian.setPower(1);
                youhou.setPower(1);
            case hou:
                zuoqian.setPower(-1);
                zuohou.setPower(-1);
                youqian.setPower(-1);
                youhou.setPower(-1);
            case zuo:
                zuoqian.setPower(-1);
                zuohou.setPower(1);
                youqian.setPower(1);
                youhou.setPower(-1);
            case you:
                zuoqian.setPower(1);
                zuohou.setPower(-1);
                youqian.setPower(-1);
                youhou.setPower(1);
            case ting:
                zuoqian.setPower(0);
                zuohou.setPower(0);
                youqian.setPower(0);
                youhou.setPower(0);
            case youxuan:
                zuoqian.setPower(0.2);
                zuohou.setPower(0.2);
                youqian.setPower(-0.2);
                youhou.setPower(-0.2);
            case zuoxuan:
                zuoqian.setPower(-0.2);
                zuohou.setPower(-0.2);
                youqian.setPower(0.2);
                youhou.setPower(0.2);
        }
    }
    //endregion
    //region机械爪
    public void shejiao( jiaodu mode) {
        switch (mode){
            case zhuaqu:
                shangzhua.setPosition(0.2);
                xiazhua.setPosition(0.2);
            case fangxia:
                shangzhua.setPosition(0.2);
                shangzhua.setPosition(0.2);//TODO:待修改

        }
    }
    // endregion
}
